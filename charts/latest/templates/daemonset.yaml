apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.name }}-node
  labels:
    app: {{ .Values.name }}
  {{- include "chart.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}-node
    {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}-node
      {{- include "chart.selectorLabels" . | nindent 8 }}
      annotations:
        kubectl.kubernetes.io/default-container: driver
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args: {{- toYaml .Values.daemonset.driver.args | nindent 8 }}
        {{- if or .Values.webhook.ephemeral.enabled .Values.webhook.hyperconverged.enabled }}
        - --webhook-service-name={{ .Values.name }}-webhook-service
        {{- end }}
        {{- if .Values.webhook.ephemeral.enabled }}
        - --ephemeral-webhook-config={{ .Values.name }}-ephemeral-webhook
        {{- end }}
        {{- if .Values.webhook.hyperconverged.enabled }}
        - --hyperconverged-webhook-config={{ .Values.name }}-hyperconverged-webhook
        {{- end }}
        {{- if or .Values.webhook.ephemeral.enabled .Values.webhook.hyperconverged.enabled }}
        - --certificate-secret-name={{ .Values.name }}-webhook-cert
        {{- end }}
        command:
        - /local-csi-driver
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        {{- if hasPrefix "/" .Values.image.driver.repository }}
        image: "{{ .Values.image.baseRepo }}{{ .Values.image.driver.repository }}:{{ .Values.image.driver.tag | default .Chart.AppVersion}}"
        {{- else }}
        image: "{{ .Values.image.driver.repository }}:{{ .Values.image.driver.tag | default .Chart.AppVersion}}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.driver.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: driver
          initialDelaySeconds: 15
          periodSeconds: 20
        name: driver
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: driver
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: driver
          initialDelaySeconds: 5
          periodSeconds: 10
        resources: {{- toYaml .Values.daemonset.driver.resources | nindent 10 }}
        securityContext: {{- toYaml .Values.daemonset.driver.containerSecurityContext | nindent
          10 }}
        terminationMessagePath: /tmp/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        {{- if or .Values.webhook.ephemeral.enabled .Values.webhook.hyperconverged.enabled }}
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        {{- end }}
        - mountPath: /dev
          name: device
        - mountPath: /etc/kubernetes/
          name: k8s-cfg
          readOnly: true
        - mountPath: /csi
          name: csi-socket-dir
        - mountPath: /var/lib/kubelet/
          mountPropagation: Bidirectional
          name: mountpoint-dir
      - args: {{- toYaml .Values.daemonset.csiProvisioner.args | nindent 8 }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        {{- if hasPrefix "/" .Values.image.csiProvisioner.repository }}
        image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
        {{- else }}
        image: "{{ .Values.image.csiProvisioner.repository }}:{{ .Values.image.csiProvisioner.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.csiProvisioner.pullPolicy }}
        livenessProbe:
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 20
          tcpSocket:
            port: provisioner
          timeoutSeconds: 10
        name: csi-provisioner
        ports:
        - containerPort: 8090
          name: provisioner
          protocol: TCP
        resources: {{- toYaml .Values.daemonset.csiProvisioner.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /csi
          name: csi-socket-dir
      - args: {{- toYaml .Values.daemonset.lvmResizer.args | nindent 8 }}
        env:
        - name: ADDRESS
          value: {{ quote .Values.daemonset.lvmResizer.env.address }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        {{- if hasPrefix "/" .Values.image.csiResizer.repository }}
        image: "{{ .Values.image.baseRepo }}{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
        {{- else }}
        image: "{{ .Values.image.csiResizer.repository }}:{{ .Values.image.csiResizer.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.csiResizer.pullPolicy }}
        name: csi-resizer
        ports:
        - containerPort: 29756
          name: resizer
          protocol: TCP
        resources: {{- toYaml .Values.daemonset.lvmResizer.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /csi
          name: csi-socket-dir
      - args: {{- toYaml .Values.daemonset.csiRegistrar.args | nindent 8 }}
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        {{- if hasPrefix "/" .Values.image.nodeDriverRegistrar.repository }}
        image: "{{ .Values.image.baseRepo }}{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
        {{- else }}
        image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.nodeDriverRegistrar.pullPolicy }}
        livenessProbe:
          failureThreshold: 1
          httpGet:
            path: /healthz
            port: registrar
          initialDelaySeconds: 5
          periodSeconds: 20
          timeoutSeconds: 5
        name: csi-registrar
        ports:
        - containerPort: 8091
          name: registrar
          protocol: TCP
        resources: {{- toYaml .Values.daemonset.csiRegistrar.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /csi
          name: csi-socket-dir
        - mountPath: /registration
          name: registration-dir
      hostPID: true
      nodeSelector: {{- toYaml .Values.daemonset.nodeSelector | nindent 8 }}
      priorityClassName: system-node-critical
      securityContext: {{- toYaml .Values.daemonset.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ .Values.name }}-node
      terminationGracePeriodSeconds: 60
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      {{- if or .Values.webhook.ephemeral.enabled .Values.webhook.hyperconverged.enabled }}
      - name: cert
        secret:
          secretName: {{ .Values.name }}-webhook-cert
      {{- end }}
      - hostPath:
          path: /dev
          type: Directory
        name: device
      - hostPath:
          path: /etc/kubernetes/
          type: DirectoryOrCreate
        name: k8s-cfg
      - hostPath:
          path: /var/lib/kubelet/plugins/cns.io/
          type: DirectoryOrCreate
        name: csi-socket-dir
      - hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: Directory
        name: registration-dir
      - hostPath:
          path: /var/lib/kubelet/
          type: DirectoryOrCreate
        name: mountpoint-dir
