// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: block.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/mockgen_copyright.txt -destination=mock_block.go -mock_names=Interface=Mock -package=block -source=block.go Interface
//

// Package block is a generated GoMock package.
package block

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mock is a mock of Interface interface.
type Mock struct {
	ctrl     *gomock.Controller
	recorder *MockMockRecorder
	isgomock struct{}
}

// MockMockRecorder is the mock recorder for Mock.
type MockMockRecorder struct {
	mock *Mock
}

// NewMock creates a new mock instance.
func NewMock(ctrl *gomock.Controller) *Mock {
	mock := &Mock{ctrl: ctrl}
	mock.recorder = &MockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock) EXPECT() *MockMockRecorder {
	return m.recorder
}

// GetDevices mocks base method.
func (m *Mock) GetDevices(ctx context.Context) (*DeviceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", ctx)
	ret0, _ := ret[0].(*DeviceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockMockRecorder) GetDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*Mock)(nil).GetDevices), ctx)
}

// IsBlockDevice mocks base method.
func (m *Mock) IsBlockDevice(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlockDevice", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlockDevice indicates an expected call of IsBlockDevice.
func (mr *MockMockRecorder) IsBlockDevice(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlockDevice", reflect.TypeOf((*Mock)(nil).IsBlockDevice), path)
}

// IsFormatted mocks base method.
func (m *Mock) IsFormatted(device string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFormatted", device)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFormatted indicates an expected call of IsFormatted.
func (mr *MockMockRecorder) IsFormatted(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFormatted", reflect.TypeOf((*Mock)(nil).IsFormatted), device)
}

// IsLVM2 mocks base method.
func (m *Mock) IsLVM2(device string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLVM2", device)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLVM2 indicates an expected call of IsLVM2.
func (mr *MockMockRecorder) IsLVM2(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLVM2", reflect.TypeOf((*Mock)(nil).IsLVM2), device)
}
