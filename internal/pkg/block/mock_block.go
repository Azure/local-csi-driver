// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: block.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/mockgen_copyright.txt -destination=mock_block.go -mock_names=Interface=Mock -package=block -source=block.go Interface
//

// Package block is a generated GoMock package.
package block

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mock is a mock of Interface interface.
type Mock struct {
	ctrl     *gomock.Controller
	recorder *MockMockRecorder
	isgomock struct{}
}

// MockMockRecorder is the mock recorder for Mock.
type MockMockRecorder struct {
	mock *Mock
}

// NewMock creates a new mock instance.
func NewMock(ctrl *gomock.Controller) *Mock {
	mock := &Mock{ctrl: ctrl}
	mock.recorder = &MockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock) EXPECT() *MockMockRecorder {
	return m.recorder
}

// GetDevices mocks base method.
func (m *Mock) GetDevices(ctx context.Context) (*DeviceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", ctx)
	ret0, _ := ret[0].(*DeviceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockMockRecorder) GetDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*Mock)(nil).GetDevices), ctx)
}
